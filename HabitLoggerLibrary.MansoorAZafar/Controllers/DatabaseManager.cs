using Microsoft.Data.Sqlite;
using HabitLoggerLibrary.MansoorAZafar.Models;
using ConsoleTableExt;

namespace HabitLoggerLibrary.MansoorAZafar.Controllers
{
    internal class DatabaseManager
    {
        private string connectionString;
        public DatabaseManager(string connectionString = @"Data Source=habit-Tracker.db", bool dummyData=false) 
        {
            this.connectionString = connectionString;
            int queryLength = 0;
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                tableCommand.CommandText =
                    @"CREATE TABLE IF NOT EXISTS habits (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        habitType TEXT,
                        Date TEXT,
                        Quantity INTEGER,
                        Units TEXT
                    )";
                tableCommand.ExecuteNonQuery(); // don't want database to return any value, not quering
                // just telling it to do an instruction

                tableCommand.CommandText = "SELECT COUNT(*) FROM habits";
                queryLength = Convert.ToInt32(tableCommand.ExecuteScalar());

                connection.Close();
            }
            
            if(dummyData || queryLength == 0) this.AutoGenerateData();
        }

        private void AutoGenerateData()
        {
            string[] autoRandomGeneratedHabits = { "Reading", "Sleeping", "Coding", "Walking" };
            string[] autoRandomGeneratedUnits  = { "seconds", "minutes", "hours" };
            Random randomNumberGenerator = new Random();
            const int maxSpeedDataLength = 5;

            //We don't want to create a for loop and call an insert command inside because
            // we don't want to open the connection an excessive amount of times
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                
                for (int currentSpeedData = 0; currentSpeedData < maxSpeedDataLength; ++currentSpeedData)
                {
                    tableCommand.CommandText =
                        $"INSERT INTO habits(habitType, Date, Quantity, Units)"
                        + $"VALUES('{autoRandomGeneratedHabits[randomNumberGenerator.Next(0, autoRandomGeneratedHabits.Length)]}', "
                        + $"'{DateTime.Now:yyyy-MM-dd}', {currentSpeedData + 2}, '{autoRandomGeneratedUnits[randomNumberGenerator.Next(0,autoRandomGeneratedUnits.Length)]}')";

                    tableCommand.ExecuteNonQuery();
                }
                
                connection.Close();
            }
        }

        public void PrintAllData()
        {
            var tableData = new List<List<object>>();

            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                tableCommand.CommandText = "SELECT * FROM habits";
                
                using (var reader = tableCommand.ExecuteReader())
                {
                    while (reader.Read())
                    { 
                        tableData.Add
                        (
                            new List<object> { reader["id"], reader["habitType"], reader["Date"], reader["Quantity"], reader["Units"] }
                        );
                    }
                    
                    ConsoleTableBuilder
                    .From(tableData)
                    .WithTitle("HABITS ", ConsoleColor.Yellow, ConsoleColor.DarkGray)
                    .WithColumn("ID", "Habit Type", "Date", "Quantity", "Units")
                    .ExportAndWriteLine(TableAligntment.Center);

                    reader.Close();
                }
                
                connection.Close();
            }
        }

        public int GetNumberOfEntries()
        {
            int queryLength;
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var checkCommand = connection.CreateCommand();
                checkCommand.CommandText = $"SELECT COUNT(*) FROM habits";
                queryLength = Convert.ToInt32(checkCommand.ExecuteScalar());
                connection.Close();
            }
            return queryLength;
        }

        public bool IDExists(int ID)
        {
            int queryLength = 0;
            using(var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var checkCommand = connection.CreateCommand();
                checkCommand.CommandText = @$"
                                            SELECT COUNT(*)
                                            FROM habits
                                            WHERE id= @ID";

                checkCommand.Parameters.AddWithValue("@ID", ID);

                queryLength = Convert.ToInt32(checkCommand.ExecuteScalar());
                connection.Close();
            }
            return queryLength > 0;
        }

        public void Update(ref int ID, ref string habitType, ref DateTime date, ref int quantity, ref string units)
        {
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();

                tableCommand.CommandText =
                    @$"UPDATE habits
                       SET habitType = @habitType,
                           date = @Date,
                           Quantity = @quantity,
                           Units = @units
                       WHERE
                           id = @ID";

                tableCommand.Parameters.AddWithValue("@habitType", habitType);
                tableCommand.Parameters.AddWithValue("@Date", date.ToString("yyyy-MM-dd"));
                tableCommand.Parameters.AddWithValue("@quantity", quantity);
                tableCommand.Parameters.AddWithValue("@units", units);
                tableCommand.Parameters.AddWithValue("@ID", ID);

                tableCommand.ExecuteNonQuery();
                connection.Close();
            }
        }
    
        public void Delete(ref int id)
        {
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();

                tableCommand.CommandText =
                    @$"DELETE 
                       FROM habits
                       WHERE id = @id";

                tableCommand.Parameters.AddWithValue("@id", id);
                tableCommand.ExecuteNonQuery();
                connection.Close();
            }
        }

        public void Insert(ref string habitType, ref DateTime date, ref int quantity, ref string units)
        {
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();

                tableCommand.CommandText =
                    @"INSERT INTO habits(habitType, Date, Quantity, Units)
                      VALUES(@habitType, @Date, @quantity, @units)";

                tableCommand.Parameters.AddWithValue("@habitType", habitType);
                tableCommand.Parameters.AddWithValue("@Date", date.ToString("yyyy-MM-dd"));
                tableCommand.Parameters.AddWithValue("@quantity", quantity);
                tableCommand.Parameters.AddWithValue("@units", units);

                tableCommand.ExecuteNonQuery();
                connection.Close();
            }
        }

        public void GetDataFromDate(ref DateTime start, ref DateTime end)
        {
            var tableData = new List<List<object>>();
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                tableCommand.CommandText =
                    @"SELECT *
                      FROM habits
                      WHERE DATE(Date) BETWEEN DATE(@startDate) AND DATE(@endDate)";

                tableCommand.Parameters.AddWithValue("@startDate", start.ToString("yyyy-MM-dd"));
                tableCommand.Parameters.AddWithValue("@endDate", end.ToString("yyyy-MM-dd"));

                using (var reader = tableCommand.ExecuteReader())
                {
                    while (reader.Read())
                        tableData.Add
                        (
                            new List<object> { reader["id"], reader["habitType"], reader["Date"], reader["Quantity"], reader["Units"] }
                        );

                    ConsoleTableBuilder
                    .From(tableData)
                    .WithTitle("HABITS ", ConsoleColor.Yellow, ConsoleColor.DarkGray)
                    .WithColumn("ID", "Habit Type", "Date", "Quantity", "Units")
                    .ExportAndWriteLine(TableAligntment.Center);

                    reader.Close();
                }

                connection.Close();
            }
        }

        public int GetTotalQuantity()
        {
            int total = 0;
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                tableCommand.CommandText =
                    @"SELECT SUM(Quantity) FROM habits";

                total = Convert.ToInt32(tableCommand.ExecuteScalar());
                connection.Close();
            }
            return total;
        }

        public int GetTotalQuantityFromMonth(ref int month)
        {
            int total = 0;
            using (var connection = new SqliteConnection(this.connectionString))
            {
                connection.Open();
                var tableCommand = connection.CreateCommand();
                tableCommand.CommandText =
                    @"SELECT SUM(Quantity) FROM habits where strftime('%m', Date) = @month";

                tableCommand.Parameters.AddWithValue("@month", month.ToString("D2"));

                var result = tableCommand.ExecuteScalar();
                // Safely handle DBNull or null values
                if (result != null && result != DBNull.Value)
                    total = Convert.ToInt32(result);

                
                connection.Close();
            }
            return total;
        }
    }
}
